/* 
 * labere database proposal, version 5.
 * author: pirogoeth
 * date/time: 6/2, 11:48 AM
 * status: implementing.
 */

if you don't know what labere is, then don't read this document.

this document describes labere's data storage format and structure.

==============================
=  main structure and type   =
==============================

labere is planned to use a dictionary to handle all
database storage and such required by an irc services bundle.

most likely, either python's shelve module will be utilized, as it
seems to present a fairly quick way to store data, as well as moderately
protect the contents of the database from people with prying eyes (eg.,
people with text editors in your services directory.)

the base dict will look like this:

labere.db
  |
  |--['users']
  |    |-[username] 
  |    |   |-['data'] # accountname, password, grouped nicks
  |    |   |-['metadata'] # registration date, email, services operator status
  |    |   |-['channels'] # channels this user owns/has registered.
  |    |   `-['flags'] # private, hideemail
  |    |-['grouped'] # array f grouped nicks
  |    `-['logged_in'] # dict of logged in users (host: username)
  |
  |--['channels']
  |     `-[channel]
  |          |-['flags'] # user flags
  |          |-['settings'] # channel settings, like keeptopic, fantasy, fantasy prefix
  |          |-['metadata'] # owner info, etc
  |          `-['topic'] # keeps the topic in storage
  |
  `--['misc']
       |-['bots'] # bots to handle fantasy in channels
       |    `-[bot]
       |       |-['channels'] # channels this bot is registered to be in
       |       `-['metadata'] # bot name, ident, hostname, gecos, creation time
       |
       |-['services_options'] # [Q] various services options that are stored in the db
       |
       `-['labop_extended'] # [Q] extended services operator settings

---------------------------
- structure legend:       -
-                         - 
- [Q] -- questionable     -
-                         -  
---------------------------

as shown, most of the database will consist of dictionary trees, with,
of course, lists, tuples, singletons and such as they need to be there.
with labere's on-board scheduler, i think that the database should be 
synched every hour or so, so if the services program crashes, data
corruption or loss hopefully will not occur.


=================================
=     registration              =
=================================

there are two types of registration: channel and user.

user registration, i feel, should be started with a temporary dictionary
and then inserted into the main db, so you dont go crazy on writes,
since after all, writeback is on in the shelve.

it should look like this:

    userdb = {}
    creation = int(str(time.time()).split('.')[0])
    userdb.update({'data': {}, 'metadata': {}, 'flags': {}})
    userdb['data'].update({'acname': username, 'password': \
        hashlib.md5().update(password).hexdigest(), \
        'grouped': []})
    userdb['metadata'].update({'email': str(email), 'regtime': int(creation), \
        'soper': 'normal'})
    userdb['flags'].update({'private': False, 'hidemail': True})
    self._db['users'].update({username: userdb})
    del userdb
    self.sync_db()
    
that should be the process how a user is registered.

channel registration should follow a method similar to that of which
user registration uses, except with the keys and nests for channel data.

    chandb = {}
    creation = int(str(time.time()).split('.')[0])
    chandb.update({'flags': {}, 'metadata': {}, 'settings': {}, \
        'topic': ''})
    chandb['flags'].update({str(username): ['f', 'o', 't', 'p']})
    chandb['metadata'].update({'owner': username, \
        'regtime': int(creation),
        'email': str(self._db['users'][username]['metadata']['email']),
        'mlock_def': '+nt'}) # default mlock mode
    chandb['settings'].update({'keeptopic': True, \
        'mlock': False, \
        'fantasy': True, \
        'f_prefix': '.'})
    chandb['topic'] = []
    self._db['channels'].update({'channel': chandb})
    del chandb
    self.sync_db()
    
a channel flags system has yet to be designed, but i have an idea for it.
